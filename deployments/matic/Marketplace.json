{
  "address": "0xD8949E578736b4569f28171c9c49027FaB7d7939",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tartTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "CancelAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "CancelListing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_transactionFee",
          "type": "uint256"
        }
      ],
      "name": "ChangedTransactionFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "ClaimAfterAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "ListingForSell",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "Purchase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "WithdrawFee",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC721_Interface",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_AUCTION_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_AUCTION_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_MILLION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptedToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isListing",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "biders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bids",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimAfterAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "getAuctionBidsPagination",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "getTransactionPagination",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bider",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            }
          ],
          "internalType": "struct Marketplace.Transaction[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_acceptedToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastBider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "listingForSell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "offers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isListing",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_transactionFee",
          "type": "uint256"
        }
      ],
      "name": "setTransactionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transactionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x49993c8c81bd9bdb863be1fa7188c0dbc92da9befc6e5f1ea0afe78da1c35ce6",
  "receipt": {
    "to": null,
    "from": "0x46362CC0B966e7836BA78A1165306b39aadfe12B",
    "contractAddress": "0xD8949E578736b4569f28171c9c49027FaB7d7939",
    "transactionIndex": 41,
    "gasUsed": "2515121",
    "logsBloom": "0x
    "blockHash": "0x1a4e9c54672de58d631535a03e8b6c90f1ba149d6ad3224ecfb5d6ad89d60c12",
    "transactionHash": "0x49993c8c81bd9bdb863be1fa7188c0dbc92da9befc6e5f1ea0afe78da1c35ce6",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 22548849,
        "transactionHash": "0x49993c8c81bd9bdb863be1fa7188c0dbc92da9befc6e5f1ea0afe78da1c35ce6",
        "address": "0xD8949E578736b4569f28171c9c49027FaB7d7939",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000046362cc0b966e7836ba78a1165306b39aadfe12b"
        ],
        "data": "0x",
        "logIndex": 186,
        "blockHash": "0x1a4e9c54672de58d631535a03e8b6c90f1ba149d6ad3224ecfb5d6ad89d60c12"
      },
      {
        "transactionIndex": 41,
        "blockNumber": 22548849,
        "transactionHash": "0x49993c8c81bd9bdb863be1fa7188c0dbc92da9befc6e5f1ea0afe78da1c35ce6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000046362cc0b966e7836ba78a1165306b39aadfe12b",
          "0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001656b91a6e290000000000000000000000000000000000000000000000000015517be500d92e1c600000000000000000000000000000000000000000000ca923125592cc2b8e15d00000000000000000000000000000000000000000000000153b252be66b051c600000000000000000000000000000000000000000000ca92328ac4be699b715d",
        "logIndex": 187,
        "blockHash": "0x1a4e9c54672de58d631535a03e8b6c90f1ba149d6ad3224ecfb5d6ad89d60c12"
      }
    ],
    "blockNumber": 22548849,
    "cumulativeGasUsed": "8669483",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "69215b97053ff919def88a461b79db26",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"CancelAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"CancelListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_transactionFee\",\"type\":\"uint256\"}],\"name\":\"ChangedTransactionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimAfterAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"ListingForSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"WithdrawFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC721_Interface\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AUCTION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_AUCTION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_MILLION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListing\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"biders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimAfterAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getAuctionBidsPagination\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getTransactionPagination\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct Marketplace.Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_acceptedToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastBider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"listingForSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListing\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionFee\",\"type\":\"uint256\"}],\"name\":\"setTransactionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelAuction(address,uint256)\":{\"details\":\"Cancel auction with ERC721 token\",\"params\":{\"_tokenAddress\":\"- address of the ERC721 token\",\"_tokenId\":\"- uint256 of the token id\"}},\"cancelListing(address,uint256)\":{\"details\":\"Cancel listing ERC721 token in market.\",\"params\":{\"_tokenAddress\":\"- address of the ERC721 token\",\"_tokenId\":\"- uint256 of the token id\"}},\"claimAfterAuction(address,uint256)\":{\"details\":\"Claim nft and token before auction ended\",\"params\":{\"_tokenAddress\":\"- address of the ERC721 token\",\"_tokenId\":\"- uint256 of the token id\"}},\"createAuction(address,uint256,uint256,uint256,uint256)\":{\"details\":\"Create auction with ERC721 token\",\"params\":{\"_duration\":\"- uint256 of the duration in seconds for the bid\",\"_minPrice\":\"- uint256 of the price for the auction\",\"_startTime\":\"- uint256 of the start time\",\"_tokenAddress\":\"- address of the ERC721 token\",\"_tokenId\":\"- uint256 of the token id\"}},\"listingForSell(address,uint256,uint256)\":{\"details\":\"Listing ERC721 token for sell in market.\",\"params\":{\"_price\":\"- uint256 of the price for the bid\",\"_tokenAddress\":\"- address of the ERC721 token\",\"_tokenId\":\"- uint256 of the token id\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"placeBid(address,uint256,uint256)\":{\"details\":\"Place a bid for an ERC721 token\",\"params\":{\"_price\":\"- uint256 of the price for the bid\",\"_tokenAddress\":\"- address of the ERC721 token\",\"_tokenId\":\"- uint256 of the token id\"}},\"purchase(address,uint256)\":{\"details\":\"Purchase with accepted token to earn ERC721 token\",\"params\":{\"_tokenAddress\":\"- address of the ERC721 token\",\"_tokenId\":\"- uint256 of the token id\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTransactionFee(uint256)\":{\"details\":\"Sets the share cut for the owner of the contract that's charged to the seller on a successful sale\",\"params\":{\"_transactionFee\":\"- from 0 to 999,999\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFee(address)\":{\"details\":\"Withdraw fee in contract\",\"params\":{\"_to\":\"- receiver\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptedToken()\":{\"notice\":\"coin to be used to trade or bids\"},\"auctions(address,uint256)\":{\"notice\":\"token address => token id => auction info\"},\"biders(address,uint256,uint256)\":{\"notice\":\"token address => token id => list bider\"},\"bids(address,uint256,address)\":{\"notice\":\"token address => token id => bider => amount\"},\"feeBalance()\":{\"notice\":\"fee balance\"},\"lastBider(address,uint256)\":{\"notice\":\"token address => token id => last bider\"},\"offers(address,uint256)\":{\"notice\":\"token address => token id => offer info\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"transactionFee()\":{\"notice\":\"transaction fee\"},\"transactions(address,uint256,uint256)\":{\"notice\":\"token address => token id => transaction history\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace.sol\":\"Marketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"./interfaces/IERC721Verifiable.sol\\\";\\n\\ncontract Marketplace is Context, Ownable, Initializable, IERC721Receiver {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant MAX_AUCTION_DURATION = 182 days; // 182 days - 26 weeks - 6 months\\n    uint256 public constant MIN_AUCTION_DURATION = 1 minutes;\\n    uint256 public constant ONE_MILLION = 1000000;\\n    bytes4 public constant ERC721_Interface = 0x80ac58cd;\\n\\n    struct Offer {\\n        bool isListing;\\n        address seller;\\n        uint256 price;\\n    }\\n\\n    struct Auction {\\n        bool isListing;\\n        address seller;\\n        uint256 minPrice;\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n\\n    struct Transaction {\\n        address seller;\\n        address bider;\\n        uint256 price;\\n        uint256 time;\\n    }\\n\\n    /// @notice token address => token id => offer info\\n    mapping(address => mapping(uint256 => Offer)) public offers;\\n\\n    /// @notice token address => token id => auction info\\n    mapping(address => mapping(uint256 => Auction)) public auctions;\\n\\n    /// @notice token address => token id => bider => amount\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) public bids;\\n\\n    /// @notice token address => token id => last bider\\n    mapping(address => mapping(uint256 => address)) public lastBider;\\n\\n    /// @notice token address => token id => list bider\\n    mapping(address => mapping(uint256 => address[])) public biders;\\n\\n    /// @notice token address => token id => transaction history\\n    mapping(address => mapping(uint256 => Transaction[])) public transactions;\\n\\n    /// @notice coin to be used to trade or bids\\n    IERC20 public acceptedToken;\\n\\n    /// @notice transaction fee\\n    uint256 public transactionFee;\\n\\n    /// @notice fee balance\\n    uint256 public feeBalance;\\n\\n    /* ========== INITTIALIZE =============== */\\n\\n    function initialize(address _acceptedToken) external initializer {\\n        require(_acceptedToken != address(0), \\\"Invalid address!\\\");\\n        acceptedToken = IERC20(_acceptedToken);\\n    }\\n\\n    /* ========== VIEWS FUNCTIONS ========== */\\n\\n    function getAuctionBidsPagination(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _cursor,\\n        uint256 _size\\n    ) external view returns (address[] memory, uint256) {\\n        uint256 length = _size;\\n        if (length > biders[_tokenAddress][_tokenId].length - _cursor) {\\n            length = biders[_tokenAddress][_tokenId].length - _cursor;\\n        }\\n        address[] memory values = new address[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            values[i] = biders[_tokenAddress][_tokenId][_cursor + i];\\n        }\\n        return (values, _cursor + length);\\n    }\\n\\n    function getTransactionPagination(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _cursor,\\n        uint256 _size\\n    ) external view returns (Transaction[] memory, uint256) {\\n        uint256 length = _size;\\n        if (length > transactions[_tokenAddress][_tokenId].length - _cursor) {\\n            length = transactions[_tokenAddress][_tokenId].length - _cursor;\\n        }\\n        Transaction[] memory values = new Transaction[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            values[i] = transactions[_tokenAddress][_tokenId][_cursor + i];\\n        }\\n        return (values, _cursor + length);\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    /**\\n     * @dev Listing ERC721 token for sell in market.\\n     * @param _tokenAddress - address of the ERC721 token\\n     * @param _tokenId - uint256 of the token id\\n     * @param _price - uint256 of the price for the bid\\n     */\\n    function listingForSell(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _price\\n    ) external {\\n        _requireERC721(_tokenAddress);\\n        require(!offers[_tokenAddress][_tokenId].isListing, \\\"Offer already exists\\\");\\n        require(_price > 0, \\\"Required price larger than zero\\\");\\n        offers[_tokenAddress][_tokenId] = Offer(true, _msgSender(), _price);\\n        IERC721(_tokenAddress).safeTransferFrom(_msgSender(), address(this), _tokenId);\\n        emit ListingForSell(_msgSender(), _tokenAddress, _tokenId, _price);\\n    }\\n\\n    /**\\n     * @dev Cancel listing ERC721 token in market.\\n     * @param _tokenAddress - address of the ERC721 token\\n     * @param _tokenId - uint256 of the token id\\n     */\\n    function cancelListing(address _tokenAddress, uint256 _tokenId) external {\\n        Offer memory _offer = offers[_tokenAddress][_tokenId];\\n        require(_offer.isListing, \\\"Offer is not available\\\");\\n        require(_offer.seller == _msgSender(), \\\"Only seller can cancel offer\\\");\\n        delete offers[_tokenAddress][_tokenId];\\n        IERC721(_tokenAddress).safeTransferFrom(address(this), _msgSender(), _tokenId);\\n        emit CancelListing(_msgSender(), _tokenAddress, _tokenId);\\n    }\\n\\n    /**\\n     * @dev Purchase with accepted token to earn ERC721 token\\n     * @param _tokenAddress - address of the ERC721 token\\n     * @param _tokenId - uint256 of the token id\\n     */\\n    function purchase(address _tokenAddress, uint256 _tokenId) external {\\n        Offer memory _offer = offers[_tokenAddress][_tokenId];\\n        require(_offer.isListing, \\\"Offer is not available\\\");\\n        require(_offer.seller != _msgSender(), \\\"Seller can not purchase\\\");\\n        transactions[_tokenAddress][_tokenId].push(\\n            Transaction(_offer.seller, _msgSender(), _offer.price, block.timestamp)\\n        );\\n        delete offers[_tokenAddress][_tokenId];\\n        acceptedToken.safeTransferFrom(_msgSender(), address(this), _offer.price);\\n        uint256 _feeAmount = 0;\\n        if (transactionFee > 0) {\\n            _feeAmount = _offer.price.mul(transactionFee).div(ONE_MILLION);\\n            feeBalance = feeBalance.add(_feeAmount);\\n            acceptedToken.safeTransfer(_offer.seller, _offer.price.sub(_feeAmount));\\n        } else {\\n            acceptedToken.safeTransfer(_offer.seller, _offer.price);\\n        }\\n        IERC721(_tokenAddress).safeTransferFrom(address(this), _msgSender(), _tokenId);\\n        emit Purchase(_msgSender(), _tokenAddress, _tokenId, _feeAmount);\\n    }\\n\\n    /**\\n     * @dev Create auction with ERC721 token\\n     * @param _tokenAddress - address of the ERC721 token\\n     * @param _tokenId - uint256 of the token id\\n     * @param _minPrice - uint256 of the price for the auction\\n     * @param _startTime - uint256 of the start time\\n     * @param _duration - uint256 of the duration in seconds for the bid\\n     */\\n    function createAuction(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _minPrice,\\n        uint256 _startTime,\\n        uint256 _duration\\n    ) external {\\n        _requireERC721(_tokenAddress);\\n        require(_startTime >= block.timestamp, \\\"Required start time larger than current time\\\");\\n        require(_duration >= MIN_AUCTION_DURATION, \\\"The auction should be last longer than a min auction duration\\\");\\n        require(_duration <= MAX_AUCTION_DURATION, \\\"The auction can not last longer than max auction duration\\\");\\n        require(!auctions[_tokenAddress][_tokenId].isListing, \\\"Auction already exists\\\");\\n        uint256 _endTime = _startTime.add(_duration);\\n        auctions[_tokenAddress][_tokenId] = Auction(true, _msgSender(), _minPrice, _startTime, _endTime);\\n        IERC721(_tokenAddress).safeTransferFrom(_msgSender(), address(this), _tokenId);\\n        emit AuctionCreated(_msgSender(), _tokenAddress, _tokenId, _minPrice, _startTime, _endTime);\\n    }\\n\\n    /**\\n     * @dev Cancel auction with ERC721 token\\n     * @param _tokenAddress - address of the ERC721 token\\n     * @param _tokenId - uint256 of the token id\\n     */\\n    function cancelAuction(address _tokenAddress, uint256 _tokenId) external {\\n        Auction memory _auction = auctions[_tokenAddress][_tokenId];\\n        address _lastBider = lastBider[_tokenAddress][_tokenId];\\n        require(_auction.isListing, \\\"Auction is not available\\\");\\n        require(_auction.seller == _msgSender(), \\\"Only seller can cancel auction\\\");\\n        require(_auction.endTime > block.timestamp, \\\"Can not cancel auction when auction closed\\\");\\n        if (_lastBider != address(0)) {\\n            uint256 _lastBidPrice = bids[_tokenAddress][_tokenId][_lastBider];\\n            if (_lastBidPrice > 0) {\\n                acceptedToken.safeTransfer(_lastBider, _lastBidPrice);\\n            }\\n        }\\n        deleteAuctionState(_tokenAddress, _tokenId);\\n        IERC721(_tokenAddress).safeTransferFrom(address(this), _auction.seller, _tokenId);\\n        emit CancelAuction(_msgSender(), _tokenAddress, _tokenId);\\n    }\\n\\n    /**\\n     * @dev Place a bid for an ERC721 token\\n     * @param _tokenAddress - address of the ERC721 token\\n     * @param _tokenId - uint256 of the token id\\n     * @param _price - uint256 of the price for the bid\\n     */\\n    function placeBid(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _price\\n    ) external {\\n        Auction memory _auction = auctions[_tokenAddress][_tokenId];\\n        address _lastBider = lastBider[_tokenAddress][_tokenId];\\n        uint256 _lastBidPrice = bids[_tokenAddress][_tokenId][_lastBider];\\n        require(_auction.isListing, \\\"Auction is not available\\\");\\n        require(_auction.seller != _msgSender(), \\\"The auction should have an seller different from the sender\\\");\\n        require(_auction.startTime < block.timestamp && block.timestamp < _auction.endTime, \\\"Auction not active yet\\\");\\n        require(_price >= _auction.minPrice, \\\"Required new bid price large than min price\\\");\\n        require(_price > _lastBidPrice, \\\"Required new bid price large than last bid price\\\");\\n        bids[_tokenAddress][_tokenId][_msgSender()] = _price;\\n        lastBider[_tokenAddress][_tokenId] = _msgSender();\\n        biders[_tokenAddress][_tokenId].push(_msgSender());\\n        transactions[_tokenAddress][_tokenId].push(\\n            Transaction(_auction.seller, _lastBider, _lastBidPrice, block.timestamp)\\n        );\\n        acceptedToken.safeTransferFrom(_msgSender(), address(this), _price);\\n        if (_lastBider != address(0)) {\\n            acceptedToken.safeTransfer(_lastBider, _lastBidPrice);\\n        }\\n        emit BidPlaced(_msgSender(), _tokenAddress, _tokenId, _price);\\n    }\\n\\n    /**\\n     * @dev Claim nft and token before auction ended\\n     * @param _tokenAddress - address of the ERC721 token\\n     * @param _tokenId - uint256 of the token id\\n     */\\n    function claimAfterAuction(address _tokenAddress, uint256 _tokenId) external {\\n        Auction memory _auction = auctions[_tokenAddress][_tokenId];\\n        address _lastBider = lastBider[_tokenAddress][_tokenId];\\n        address seller = _auction.seller;\\n        uint256 _feeAmount = 0;\\n        require(_auction.isListing, \\\"Auction is not available\\\");\\n        require(_auction.endTime < block.timestamp, \\\"Auction is not over yet\\\");\\n        require(_msgSender() == seller || _msgSender() == _lastBider, \\\"Only seller or last bider can claim\\\");\\n        if (_lastBider == address(0)) {\\n            require(_msgSender() == seller, \\\"Only seller can claim\\\");\\n            deleteAuctionState(_tokenAddress, _tokenId);\\n            IERC721(_tokenAddress).safeTransferFrom(address(this), seller, _tokenId);\\n        } else {\\n            uint256 _lastBidPrice = bids[_tokenAddress][_tokenId][_lastBider];\\n            if (transactionFee > 0) {\\n                _feeAmount = _lastBidPrice.mul(transactionFee).div(ONE_MILLION);\\n                feeBalance = feeBalance.add(_feeAmount);\\n                acceptedToken.safeTransfer(seller, _lastBidPrice.sub(_feeAmount));\\n            } else {\\n                acceptedToken.safeTransfer(seller, _lastBidPrice);\\n            }\\n            deleteAuctionState(_tokenAddress, _tokenId);\\n            IERC721(_tokenAddress).safeTransferFrom(address(this), _lastBider, _tokenId);\\n        }\\n        emit ClaimAfterAuction(_msgSender(), _tokenAddress, _tokenId, _feeAmount);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /**\\n     * @dev Sets the share cut for the owner of the contract that's\\n     * charged to the seller on a successful sale\\n     * @param _transactionFee - from 0 to 999,999\\n     */\\n    function setTransactionFee(uint256 _transactionFee) external onlyOwner {\\n        require(_transactionFee < ONE_MILLION, \\\"The owner cut should be between 0 and 999,999\\\");\\n        transactionFee = _transactionFee;\\n        emit ChangedTransactionFee(transactionFee);\\n    }\\n\\n    /**\\n     * @dev Withdraw fee in contract\\n     * @param _to - receiver\\n     */\\n    function withdrawFee(address _to) external onlyOwner {\\n        uint256 _feeBalance = feeBalance;\\n        require(_to != address(0), \\\"Invalid address\\\");\\n        require(_feeBalance > 0, \\\"Required fee balance larger than zero\\\");\\n        feeBalance = 0;\\n        acceptedToken.safeTransfer(_to, _feeBalance);\\n        emit WithdrawFee(_feeBalance, _to);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    /**\\n     * @dev Delete auction state before cancel or complete\\n     * @param _tokenAddress - address of the token\\n     * @param _tokenId - uint256 of the token id\\n     */\\n    function deleteAuctionState(address _tokenAddress, uint256 _tokenId) internal {\\n        address[] memory _biders = biders[_tokenAddress][_tokenId];\\n        for (uint256 i; i < _biders.length; i++) {\\n            delete bids[_tokenAddress][_tokenId][_biders[i]];\\n        }\\n        delete auctions[_tokenAddress][_tokenId];\\n        delete lastBider[_tokenAddress][_tokenId];\\n        delete biders[_tokenAddress][_tokenId];\\n    }\\n\\n    /**\\n     * @dev Check if the token has a valid ERC721 implementation\\n     * @param _tokenAddress - address of the token\\n     */\\n    function _requireERC721(address _tokenAddress) internal view {\\n        IERC721 token = IERC721(_tokenAddress);\\n        require(token.supportsInterface(ERC721_Interface), \\\"Token has an invalid ERC721 implementation\\\");\\n    }\\n\\n    /**\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /* =============== EVENTS ==================== */\\n    event AuctionCreated(\\n        address indexed _user,\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _minPrice,\\n        uint256 _tartTime,\\n        uint256 _endTime\\n    );\\n    event CancelAuction(address indexed _user, address _tokenAddress, uint256 _tokenId);\\n    event BidPlaced(address indexed _user, address _tokenAddress, uint256 _tokenId, uint256 _price);\\n    event ClaimAfterAuction(address indexed _user, address _tokenAddress, uint256 _tokenId, uint256 _feeAmount);\\n    event ListingForSell(address indexed _user, address _tokenAddress, uint256 _tokenId, uint256 _price);\\n    event CancelListing(address indexed _user, address _tokenAddress, uint256 _tokenId);\\n    event Purchase(address indexed _user, address _tokenAddress, uint256 _tokenId, uint256 _feeAmount);\\n    event ChangedTransactionFee(uint256 _transactionFee);\\n    event WithdrawFee(uint256 _fee, address _to);\\n}\\n\",\"keccak256\":\"0x07d1e4957b0e3d794c830b6959ae5195f75ad546ddf4c560bb8b2df48ad25b63\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC721Verifiable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721Verifiable is IERC721 {\\n    function verifyFingerprint(uint256, bytes memory) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4076f670f3def51ffe3c832ebce11204ce0384351d897a7580e3b2b3c75be5c6\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80638de9322211610104578063c4d66de8116100a2578063d60b47ee11610071578063d60b47ee146104c9578063dd768922146104fd578063f1d054031461052e578063f2fde38b1461054157600080fd5b8063c4d66de814610461578063c8e4ef5314610474578063ceb0015814610495578063d3603e43146104a857600080fd5b80639ed3edf0116100de5780639ed3edf0146103d5578063aa1a8411146103de578063b2ddee0614610446578063c2f50a7a1461045957600080fd5b80638de93222146103a5578063961c9ae4146103b85780639869b736146103cb57600080fd5b80634440199f1161017157806360b71d4e1161014b57806360b71d4e14610370578063715018a614610379578063859b97fe146103815780638da5cb5b1461039457600080fd5b80634440199f1461028457806344f91c1e146102c2578063451c3d801461034557600080fd5b80631ac3ddeb116101ad5780631ac3ddeb146102385780632b4c32be1461024b57806337ae98b6146102595780633fb351781461026c57600080fd5b806304717aca146101d4578063096a8ab7146101e9578063150b7a02146101fc575b600080fd5b6101e76101e23660046126d7565b610554565b005b6101e76101f736600461270a565b61093b565b61021a61020a366004612739565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b6101e7610246366004612815565b610a08565b61021a6380ac58cd60e01b81565b6101e7610267366004612830565b610b3c565b61027662eff10081565b60405190815260200161022f565b6102976102923660046126d7565b610ec5565b604080516001600160a01b03958616815294909316602085015291830152606082015260800161022f565b6103136102d0366004612830565b60026020818152600093845260408085209091529183529120805460018201549282015460039092015460ff8216936101009092046001600160a01b0316929085565b6040805195151586526001600160a01b039094166020860152928401919091526060830152608082015260a00161022f565b600754610358906001600160a01b031681565b6040516001600160a01b03909116815260200161022f565b61027660095481565b6101e7610f26565b6101e761038f366004612830565b610f5c565b6000546001600160a01b0316610358565b6101e76103b3366004612830565b6111d0565b6101e76103c636600461285a565b6114bb565b610276620f424081565b61027660085481565b6104216103ec366004612830565b60016020818152600093845260408085209091529183529120805491015460ff82169161010090046001600160a01b03169083565b6040805193151584526001600160a01b0390921660208401529082015260600161022f565b6101e7610454366004612830565b6117fa565b610276603c81565b6101e761046f366004612815565b6119cf565b61048761048236600461289c565b611afa565b60405161022f9291906128d5565b6101e76104a33660046126d7565b611cba565b6104bb6104b636600461289c565b611e8e565b60405161022f92919061294b565b6103586104d7366004612830565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b61027661050b36600461299c565b600360209081526000938452604080852082529284528284209052825290205481565b61035861053c3660046126d7565b611fe5565b6101e761054f366004612815565b61202a565b6001600160a01b0380841660008181526002602081815260408084208885528252808420815160a081018352815460ff8116151582526101009004881681850152600182015481840152938101546060850152600390810154608085015285855260048352818520898652835281852054958552825280842088855282528084209490951680845293905292902054825161060a5760405162461bcd60e51b8152600401610601906129d8565b60405180910390fd5b60208301516001600160a01b031633141561068d5760405162461bcd60e51b815260206004820152603b60248201527f5468652061756374696f6e2073686f756c64206861766520616e2073656c6c6560448201527f7220646966666572656e742066726f6d207468652073656e64657200000000006064820152608401610601565b4283606001511080156106a35750826080015142105b6106e85760405162461bcd60e51b8152602060048201526016602482015275105d58dd1a5bdb881b9bdd081858dd1a5d99481e595d60521b6044820152606401610601565b82604001518410156107505760405162461bcd60e51b815260206004820152602b60248201527f5265717569726564206e657720626964207072696365206c617267652074686160448201526a6e206d696e20707269636560a81b6064820152608401610601565b8084116107b85760405162461bcd60e51b815260206004820152603060248201527f5265717569726564206e657720626964207072696365206c617267652074686160448201526f6e206c6173742062696420707269636560801b6064820152608401610601565b6001600160a01b0386811660008181526003602081815260408084208b85528252808420338086529083528185208b905585855260048084528286208d8752845282862080546001600160a01b03199081168417909155878752600585528387208e88528552838720805460018181018355918952868920018054831685179055978752600685528387208e8852855283872084516080810186528d8701518b1681528c8b168188019081529581018c815242606083019081528354808d018555938b529790992090519190930290920180548216928a16929092178255925196810180549093169688169690961790915592516002850155519201919091556007546108c892169030876120c5565b6001600160a01b038216156108ee576007546108ee906001600160a01b03168383612123565b336001600160a01b03167fdd49bbb40d47a514dddcd458e9718364143bc24a0cca58439ee6f4f45e4ce10d87878760405161092b93929190612a0f565b60405180910390a2505050505050565b6000546001600160a01b031633146109655760405162461bcd60e51b815260040161060190612a30565b620f424081106109cd5760405162461bcd60e51b815260206004820152602d60248201527f546865206f776e6572206375742073686f756c64206265206265747765656e2060448201526c3020616e64203939392c39393960981b6064820152608401610601565b60088190556040518181527f672ac54f73ff220a211d5e0a6cd5d144497cdb1278a44175d84274e0dc857e2a9060200160405180910390a150565b6000546001600160a01b03163314610a325760405162461bcd60e51b815260040161060190612a30565b6009546001600160a01b038216610a7d5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610601565b60008111610adb5760405162461bcd60e51b815260206004820152602560248201527f5265717569726564206665652062616c616e6365206c6172676572207468616e604482015264207a65726f60d81b6064820152608401610601565b6000600955600754610af7906001600160a01b03168383612123565b604080518281526001600160a01b03841660208201527f14c59f662c75de843f5e393a49e77d8314a5d804c6859fb3e8827501a6ff8418910160405180910390a15050565b6001600160a01b0380831660008181526002602081815260408084208785528252808420815160a081018352815460ff811615158252610100900488168185019081526001830154828501529482015460608201526003909101546080820152948452600482528084208785529091528220549051835193949190911692909190610bd95760405162461bcd60e51b8152600401610601906129d8565b42846080015110610c2c5760405162461bcd60e51b815260206004820152601760248201527f41756374696f6e206973206e6f74206f766572207965740000000000000000006044820152606401610601565b336001600160a01b0383161480610c4b5750336001600160a01b038416145b610ca35760405162461bcd60e51b815260206004820152602360248201527f4f6e6c792073656c6c6572206f72206c6173742062696465722063616e20636c60448201526261696d60e81b6064820152608401610601565b6001600160a01b038316610d7257336001600160a01b03831614610d015760405162461bcd60e51b81526020600482015260156024820152744f6e6c792073656c6c65722063616e20636c61696d60581b6044820152606401610601565b610d0b8686612158565b604051632142170760e11b81526001600160a01b038716906342842e0e90610d3b90309086908a90600401612a65565b600060405180830381600087803b158015610d5557600080fd5b505af1158015610d69573d6000803e3d6000fd5b50505050610e88565b6001600160a01b03808716600090815260036020908152604080832089845282528083209387168352929052205460085415610e0357610dca620f4240610dc4600854846122d990919063ffffffff16565b906122ec565b600954909250610dda90836122f8565b600955610dfe83610deb8385612304565b6007546001600160a01b03169190612123565b610e1a565b600754610e1a906001600160a01b03168483612123565b610e248787612158565b604051632142170760e11b81526001600160a01b038816906342842e0e90610e5490309088908b90600401612a65565b600060405180830381600087803b158015610e6e57600080fd5b505af1158015610e82573d6000803e3d6000fd5b50505050505b336001600160a01b03167f3f63d70eb30fbcf9337ea07eeca60cf642755540949c674691947ad0fcc6922187878460405161092b93929190612a0f565b60066020528260005260406000206020528160005260406000208181548110610eed57600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b0392831696509116935090915084565b6000546001600160a01b03163314610f505760405162461bcd60e51b815260040161060190612a30565b610f5a6000612310565b565b6001600160a01b0380831660008181526002602081815260408084208785528252808420815160a081018352815460ff811615158252610100900488168185015260018201548184015293810154606085015260030154608084015293835260048152838320868452905291902054815191921690610fed5760405162461bcd60e51b8152600401610601906129d8565b60208201516001600160a01b031633146110495760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c792073656c6c65722063616e2063616e63656c2061756374696f6e00006044820152606401610601565b428260800151116110af5760405162461bcd60e51b815260206004820152602a60248201527f43616e206e6f742063616e63656c2061756374696f6e207768656e20617563746044820152691a5bdb8818db1bdcd95960b21b6064820152608401610601565b6001600160a01b0381161561110b576001600160a01b038085166000908152600360209081526040808320878452825280832093851683529290522054801561110957600754611109906001600160a01b03168383612123565b505b6111158484612158565b6020820151604051632142170760e11b81526001600160a01b038616916342842e0e916111489130918890600401612a65565b600060405180830381600087803b15801561116257600080fd5b505af1158015611176573d6000803e3d6000fd5b505050506111813390565b604080516001600160a01b0387811682526020820187905292909216917f28019131c3bf8b8285eda90929175f54578d6aab27ab21e34665b40770aa4b3191015b60405180910390a250505050565b6001600160a01b0380831660009081526001602081815260408084208685528252928390208351606081018552815460ff81161515808352610100909104909616928101929092529091015491810191909152906112695760405162461bcd60e51b81526020600482015260166024820152754f66666572206973206e6f7420617661696c61626c6560501b6044820152606401610601565b60208101516001600160a01b03163314156112c65760405162461bcd60e51b815260206004820152601760248201527f53656c6c65722063616e206e6f742070757263686173650000000000000000006044820152606401610601565b6001600160a01b0383811660008181526006602090815260408083208784528252808320815160808101835287840151871681523381850181815289850180518487019081524260608601908152865460018082018955978b52898b20965160049091029096018054968d166001600160a01b031997881617815593518488018054918e169190971617909555516002830155925160039091015595855281845282852089865290935290832080546001600160a81b03191681550191909155516007546113989316919030906120c5565b600854600090156113f4576113c3620f4240610dc460085485604001516122d990919063ffffffff16565b6009549091506113d390826122f8565b600955602082015160408301516113ef9190610deb9084612304565b611416565b60208201516040830151600754611416926001600160a01b0390911691612123565b604051632142170760e11b81526001600160a01b038516906342842e0e9061144690309033908890600401612a65565b600060405180830381600087803b15801561146057600080fd5b505af1158015611474573d6000803e3d6000fd5b5050505061147f3390565b6001600160a01b03167f46661dab58311a6838247afecbee792192b4f27fc8b3e7168c66bc55ec2e404e8585846040516111c293929190612a0f565b6114c485612360565b428210156115295760405162461bcd60e51b815260206004820152602c60248201527f52657175697265642073746172742074696d65206c6172676572207468616e2060448201526b63757272656e742074696d6560a01b6064820152608401610601565b603c8110156115a05760405162461bcd60e51b815260206004820152603d60248201527f5468652061756374696f6e2073686f756c64206265206c617374206c6f6e676560448201527f72207468616e2061206d696e2061756374696f6e206475726174696f6e0000006064820152608401610601565b62eff1008111156116195760405162461bcd60e51b815260206004820152603960248201527f5468652061756374696f6e2063616e206e6f74206c617374206c6f6e6765722060448201527f7468616e206d61782061756374696f6e206475726174696f6e000000000000006064820152608401610601565b6001600160a01b038516600090815260026020908152604080832087845290915290205460ff16156116865760405162461bcd60e51b815260206004820152601660248201527541756374696f6e20616c72656164792065786973747360501b6044820152606401610601565b600061169283836122f8565b90506040518060a001604052806001151581526020016116af3390565b6001600160a01b0390811682526020808301889052604080840188905260609384018690528a8316600081815260028085528382208d835285529083902087518154958901516001600160a81b0319909616901515610100600160a81b03191617610100959096169490940294909417835585820151600184015593850151928201929092556080909301516003909301929092559051632142170760e11b81526342842e0e9061176890339030908a90600401612a65565b600060405180830381600087803b15801561178257600080fd5b505af1158015611796573d6000803e3d6000fd5b505050506117a13390565b604080516001600160a01b0389811682526020820189905291810187905260608101869052608081018490529116907f3b7b4c5af27f2d215ab04ff752eb66d4d2500c6584590ed58288a4275196886d9060a00161092b565b6001600160a01b0380831660009081526001602081815260408084208685528252928390208351606081018552815460ff81161515808352610100909104909616928101929092529091015491810191909152906118935760405162461bcd60e51b81526020600482015260166024820152754f66666572206973206e6f7420617661696c61626c6560501b6044820152606401610601565b60208101516001600160a01b031633146118ef5760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792073656c6c65722063616e2063616e63656c206f66666572000000006044820152606401610601565b6001600160a01b0383166000818152600160208181526040808420878552909152822080546001600160a81b031916815501556342842e0e3033856040518463ffffffff1660e01b815260040161194893929190612a65565b600060405180830381600087803b15801561196257600080fd5b505af1158015611976573d6000803e3d6000fd5b505050506119813390565b604080516001600160a01b0386811682526020820186905292909216917f061e64e10e5e57615a6fe38b48c81926f6999a2f5304d3e5e6b0d3cfac4865a591015b60405180910390a2505050565b600054600160a81b900460ff16806119f15750600054600160a01b900460ff16155b611a545760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610601565b600054600160a81b900460ff16158015611a7e576000805461ffff60a01b191661010160a01b1790555b6001600160a01b038216611ac75760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420616464726573732160801b6044820152606401610601565b600780546001600160a01b0319166001600160a01b0384161790558015611af6576000805460ff60a81b191690555b5050565b6001600160a01b0384166000908152600660209081526040808320868452909152812054606091908390611b2f908690612a9f565b811115611b68576001600160a01b0387166000908152600660209081526040808320898452909152902054611b65908690612a9f565b90505b60008167ffffffffffffffff811115611b8357611b83612723565b604051908082528060200260200182016040528015611bd557816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181611ba15790505b50905060005b82811015611c9f576001600160a01b03891660009081526006602090815260408083208b84529091529020611c108289612ab6565b81548110611c2057611c20612ace565b600091825260209182902060408051608081018252600490930290910180546001600160a01b0390811684526001820154169383019390935260028301549082015260039091015460608201528251839083908110611c8157611c81612ace565b60200260200101819052508080611c9790612ae4565b915050611bdb565b5080611cab8388612ab6565b93509350505094509492505050565b611cc383612360565b6001600160a01b038316600090815260016020908152604080832085845290915290205460ff1615611d2e5760405162461bcd60e51b81526020600482015260146024820152734f6666657220616c72656164792065786973747360601b6044820152606401610601565b60008111611d7e5760405162461bcd60e51b815260206004820152601f60248201527f5265717569726564207072696365206c6172676572207468616e207a65726f006044820152606401610601565b6040805160608101825260018082523360208084018281528486018781526001600160a01b038a811660008181528786528981208c8252909552938890209651875493516001600160a81b0319909416901515610100600160a81b0319161761010093909116929092029190911785555193909201929092559151632142170760e11b81526342842e0e91611e199130908790600401612a65565b600060405180830381600087803b158015611e3357600080fd5b505af1158015611e47573d6000803e3d6000fd5b50505050611e523390565b6001600160a01b03167fe8dd678739794cf60b10101341bb26b42b39ccd729d6f6ef15c19c302e60addb8484846040516119c293929190612a0f565b6001600160a01b0384166000908152600560209081526040808320868452909152812054606091908390611ec3908690612a9f565b811115611efc576001600160a01b0387166000908152600560209081526040808320898452909152902054611ef9908690612a9f565b90505b60008167ffffffffffffffff811115611f1757611f17612723565b604051908082528060200260200182016040528015611f40578160200160208202803683370190505b50905060005b82811015611c9f576001600160a01b03891660009081526005602090815260408083208b84529091529020611f7b8289612ab6565b81548110611f8b57611f8b612ace565b9060005260206000200160009054906101000a90046001600160a01b0316828281518110611fbb57611fbb612ace565b6001600160a01b039092166020928302919091019091015280611fdd81612ae4565b915050611f46565b6005602052826000526040600020602052816000526040600020818154811061200d57600080fd5b6000918252602090912001546001600160a01b0316925083915050565b6000546001600160a01b031633146120545760405162461bcd60e51b815260040161060190612a30565b6001600160a01b0381166120b95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610601565b6120c281612310565b50565b61211d846323b872dd60e01b8585856040516024016120e693929190612a65565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261243f565b50505050565b6040516001600160a01b03831660248201526044810182905261215390849063a9059cbb60e01b906064016120e6565b505050565b6001600160a01b03821660009081526005602090815260408083208484528252808320805482518185028101850190935280835291929091908301828280156121ca57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116121ac575b5050505050905060005b8151811015612256576001600160a01b03841660009081526003602090815260408083208684529091528120835190919084908490811061221757612217612ace565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009055808061224e90612ae4565b9150506121d4565b506001600160a01b0383166000818152600260208181526040808420878552825280842080546001600160a81b031916815560018101859055928301849055600390920183905583835260048152818320868452815281832080546001600160a01b03191690559282526005835280822085835290925290812061215391612689565b60006122e58284612aff565b9392505050565b60006122e58284612b1e565b60006122e58284612ab6565b60006122e58284612a9f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516301ffc9a760e01b81526380ac58cd60e01b600482015281906001600160a01b038216906301ffc9a79060240160206040518083038186803b1580156123a857600080fd5b505afa1580156123bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e09190612b40565b611af65760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e2068617320616e20696e76616c69642045524337323120696d706c60448201526932b6b2b73a30ba34b7b760b11b6064820152608401610601565b6000612494826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125119092919063ffffffff16565b80519091501561215357808060200190518101906124b29190612b40565b6121535760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610601565b60606125208484600085612528565b949350505050565b6060824710156125895760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610601565b843b6125d75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610601565b600080866001600160a01b031685876040516125f39190612b8e565b60006040518083038185875af1925050503d8060008114612630576040519150601f19603f3d011682016040523d82523d6000602084013e612635565b606091505b5091509150612645828286612650565b979650505050505050565b6060831561265f5750816122e5565b82511561266f5782518084602001fd5b8160405162461bcd60e51b81526004016106019190612baa565b50805460008255906000526020600020908101906120c291905b808211156126b757600081556001016126a3565b5090565b80356001600160a01b03811681146126d257600080fd5b919050565b6000806000606084860312156126ec57600080fd5b6126f5846126bb565b95602085013595506040909401359392505050565b60006020828403121561271c57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561274f57600080fd5b612758856126bb565b9350612766602086016126bb565b925060408501359150606085013567ffffffffffffffff8082111561278a57600080fd5b818701915087601f83011261279e57600080fd5b8135818111156127b0576127b0612723565b604051601f8201601f19908116603f011681019083821181831017156127d8576127d8612723565b816040528281528a60208487010111156127f157600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60006020828403121561282757600080fd5b6122e5826126bb565b6000806040838503121561284357600080fd5b61284c836126bb565b946020939093013593505050565b600080600080600060a0868803121561287257600080fd5b61287b866126bb565b97602087013597506040870135966060810135965060800135945092505050565b600080600080608085870312156128b257600080fd5b6128bb856126bb565b966020860135965060408601359560600135945092505050565b6040808252835182820181905260009190606090818501906020808901865b8381101561293757815180516001600160a01b039081168752848201511684870152878101518887015286015186860152608090940193908201906001016128f4565b505095909501959095525092949350505050565b604080825283519082018190526000906020906060840190828701845b8281101561298d5781516001600160a01b031684529284019290840190600101612968565b50505092019290925292915050565b6000806000606084860312156129b157600080fd5b6129ba846126bb565b9250602084013591506129cf604085016126bb565b90509250925092565b60208082526018908201527f41756374696f6e206973206e6f7420617661696c61626c650000000000000000604082015260600190565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015612ab157612ab1612a89565b500390565b60008219821115612ac957612ac9612a89565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612af857612af8612a89565b5060010190565b6000816000190483118215151615612b1957612b19612a89565b500290565b600082612b3b57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612b5257600080fd5b815180151581146122e557600080fd5b60005b83811015612b7d578181015183820152602001612b65565b8381111561211d5750506000910152565b60008251612ba0818460208701612b62565b9190910192915050565b6020815260008251806020840152612bc9816040850160208701612b62565b601f01601f1916919091016040019291505056fea2646970667358221220c1b769ca3085ffc24adcceb5a3e6bcdc1f8519e3bf218ddffcae0674ea2b734b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelAuction(address,uint256)": {
        "details": "Cancel auction with ERC721 token",
        "params": {
          "_tokenAddress": "- address of the ERC721 token",
          "_tokenId": "- uint256 of the token id"
        }
      },
      "cancelListing(address,uint256)": {
        "details": "Cancel listing ERC721 token in market.",
        "params": {
          "_tokenAddress": "- address of the ERC721 token",
          "_tokenId": "- uint256 of the token id"
        }
      },
      "claimAfterAuction(address,uint256)": {
        "details": "Claim nft and token before auction ended",
        "params": {
          "_tokenAddress": "- address of the ERC721 token",
          "_tokenId": "- uint256 of the token id"
        }
      },
      "createAuction(address,uint256,uint256,uint256,uint256)": {
        "details": "Create auction with ERC721 token",
        "params": {
          "_duration": "- uint256 of the duration in seconds for the bid",
          "_minPrice": "- uint256 of the price for the auction",
          "_startTime": "- uint256 of the start time",
          "_tokenAddress": "- address of the ERC721 token",
          "_tokenId": "- uint256 of the token id"
        }
      },
      "listingForSell(address,uint256,uint256)": {
        "details": "Listing ERC721 token for sell in market.",
        "params": {
          "_price": "- uint256 of the price for the bid",
          "_tokenAddress": "- address of the ERC721 token",
          "_tokenId": "- uint256 of the token id"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "placeBid(address,uint256,uint256)": {
        "details": "Place a bid for an ERC721 token",
        "params": {
          "_price": "- uint256 of the price for the bid",
          "_tokenAddress": "- address of the ERC721 token",
          "_tokenId": "- uint256 of the token id"
        }
      },
      "purchase(address,uint256)": {
        "details": "Purchase with accepted token to earn ERC721 token",
        "params": {
          "_tokenAddress": "- address of the ERC721 token",
          "_tokenId": "- uint256 of the token id"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setTransactionFee(uint256)": {
        "details": "Sets the share cut for the owner of the contract that's charged to the seller on a successful sale",
        "params": {
          "_transactionFee": "- from 0 to 999,999"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFee(address)": {
        "details": "Withdraw fee in contract",
        "params": {
          "_to": "- receiver"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptedToken()": {
        "notice": "coin to be used to trade or bids"
      },
      "auctions(address,uint256)": {
        "notice": "token address => token id => auction info"
      },
      "biders(address,uint256,uint256)": {
        "notice": "token address => token id => list bider"
      },
      "bids(address,uint256,address)": {
        "notice": "token address => token id => bider => amount"
      },
      "feeBalance()": {
        "notice": "fee balance"
      },
      "lastBider(address,uint256)": {
        "notice": "token address => token id => last bider"
      },
      "offers(address,uint256)": {
        "notice": "token address => token id => offer info"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "transactionFee()": {
        "notice": "transaction fee"
      },
      "transactions(address,uint256,uint256)": {
        "notice": "token address => token id => transaction history"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 109,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 112,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2941,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "offers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Offer)2913_storage))"
      },
      {
        "astId": 2949,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "auctions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)2924_storage))"
      },
      {
        "astId": 2958,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "bids",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 2965,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "lastBider",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 2973,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "biders",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 2982,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "transactions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Transaction)2933_storage)dyn_storage))"
      },
      {
        "astId": 2986,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "acceptedToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)773"
      },
      {
        "astId": 2989,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "transactionFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2992,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "feeBalance",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Transaction)2933_storage)dyn_storage": {
        "base": "t_struct(Transaction)2933_storage",
        "encoding": "dynamic_array",
        "label": "struct Marketplace.Transaction[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)773": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_struct(Transaction)2933_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Marketplace.Transaction[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_struct(Transaction)2933_storage)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)2924_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Marketplace.Auction))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Auction)2924_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Offer)2913_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Marketplace.Offer))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Offer)2913_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(Transaction)2933_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Marketplace.Transaction[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Transaction)2933_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Auction)2924_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Marketplace.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)2924_storage"
      },
      "t_mapping(t_uint256,t_struct(Offer)2913_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Marketplace.Offer)",
        "numberOfBytes": "32",
        "value": "t_struct(Offer)2913_storage"
      },
      "t_struct(Auction)2924_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.Auction",
        "members": [
          {
            "astId": 2915,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "isListing",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2917,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "seller",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2919,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "minPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2921,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2923,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Offer)2913_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.Offer",
        "members": [
          {
            "astId": 2908,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "isListing",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2910,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "seller",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2912,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Transaction)2933_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.Transaction",
        "members": [
          {
            "astId": 2926,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2928,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "bider",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2930,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2932,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "time",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}